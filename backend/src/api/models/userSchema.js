import { Schema, model } from 'mongoose';

const userSchema = new Schema({
  firstName: { type: String, required: true, index: true },
  lastName: { type: String, required: true, index: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  nationality: { type: String },
  gender: { type: String, required: true },
  birthdate: { type: Date },
  country: { type: Schema.Types.ObjectId, ref: 'Country' },
  followers: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  followed: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  likedPosts: [{ type: Schema.Types.ObjectId, ref: 'Post' }],
  comments: [{ type: Schema.Types.ObjectId, ref: 'Comments' }],
  avatar: { type: String, required: true, default: 'https://as2.ftcdn.net/v2/jpg/04/10/43/77/1000_F_410437733_hdq4Q3QOH9uwh0mcqAhRFzOKfrCR24Ta.jpg' },
  username: { type: String, required: true },
  salt: { type: String, required: true },
  role: { type: String, required: true, default: 'client' },
  prefLocation: { type: String },
  profesion: { type: String },
  visited: [{ type: Schema.Types.ObjectId, ref: 'Country' }],
  hobbie: { type: String },
  hobbie2: { type: String },
  bio: { type: String },
  location: { type: String },
  website: { type: String },
  facebook: { type: String },
  twitter: { type: String },
  instagram: { type: String },
  linkedin: { type: String },
  github: { type: String },
}, {
  timestamps: true,
  toObject: { getters: true },
  toJSON: { getters: true },
});

userSchema.virtual('followersCount').get(function () { return this.followers.length })
userSchema.virtual('followedCount').get(function () { return this.followed.length })
userSchema.virtual('likedPostsCount').get(function () { return this.likedPosts.length })
userSchema.virtual('displayName').get(function () { return this.firstName + " " + this.lastName })

const userModel = model('User', userSchema);

export default userModel;

// DOCUMENTATION
/**
 * @swagger
 * components:
 *  schemas:
 *    User:
 *      required:
 *        - firstName
 *        - lastName
 *        - email
 *        - password
 *        - salt
 *      type: object
 *      properties:
 *        _id:
 *          type: string
 *          description: Autogenerated Mongo Object ID
 *          example: "507f1f77bcf86cd799439011"
 *        firstName:
 *          type: string
 *          description: User's first name
 *          example: "Antonio"
 *        lastName:
 *          type: string
 *          description: User's last name
 *          example: "Resines"
 *        role:
 *          type: string
 *          description: User's access rights
 *          example: "client"
 *        email:
 *          type: string
 *          description: User's email
 *          example: "antonio-resines@losserrano.com"
 *        password:
 *          type: string
 *          description: User's hashed password
 *          example: "e5a441aceb8812e24345411413a8679f87e3e29ad2a6c76df3e99c0e0108b561"
 *        salt:
 *          type: string
 *          description: Autogenerated user's hashed password salt decrypter
 *          example: "83e8eef85b70283c1c36a35c9b4b9bd6"
 *        birthdate:
 *          type: date
 *          description: User's date of birth
 *          example: "07/08/1954"
 *        gender:
 *          type: string
 *          description: User's gender
 *          example: "Male"
 *        city:
 *          type: string
 *          description: User's city of origin
 *          example: "Torrelavega"
 *        nationality:
 *          type: string
 *          description: User's country of origin
 *          example: "Spain"
 *        followers:
 *          type: array
 *          items:
 *            $ref: '#/components/schemas/User'
 *          description: Users that follow the user
 *          example: ["507f1f77bcf86cd799439012", "507f1f77bcf86cd799439013"]
 *        followed:
 *          type: array
 *          items:
 *            $ref: '#/components/schemas/User'
 *          description: Users followed by the user
 *          example: ["507f1f77bcf86cd799439012", "507f1f77bcf86cd799439013"]
 *        likedPosts:
 *          type: array
 *          items:
 *            $ref: '#/components/schemas/Post'
 *          description: User's liked posts
 *          example: ["507f1f77bcf86cd799439024", "507f1f77bcf86cd799439025"]
 *        comments:
 *          type: array
 *          items:
 *            $ref: '#/components/schemas/Comment'
 *          description: User's comments
 *          example: ["507f1f77bcf86cd799439032", "507f1f77bcf86cd799439033"]
 *        avatar:
 *          type: string
 *          description: User's avatar bitmap
 *          example: "123345646"
 *        __v:
 *          type: integer
 *          format: int32
 *          description: Version Key of document
 *          example: 0
 *        createdAt:
 *          type: Date
 *          description: Datetime when object was created
 *          example: '2023-02-23T21:30:13.106Z'
 *        updatedAt:
 *          type: string
 *          description: Datetime when object was last updated
 *          example: '2023-02-23T21:30:13.106Z'
 */